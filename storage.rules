
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Default Deny: Nobody can read or write files by default.
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // Listings Images:
    // Anyone can read listing images as they are public.
    // Only the authenticated landowner can upload/delete images to their own folder.
    // The path `listings/{userId}/{fileName}` is crucial.
    match /listings/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Lease Contracts:
    // These are private. Only the renter or landowner involved in the booking can access them.
    // This requires your frontend to pass booking details or use custom claims for full security.
    // For this implementation, we will lock it to the user who uploaded it.
    // A more robust rule would check a `bookings` document.
    match /leaseContracts/{bookingId}/{fileName} {
      allow read: if request.auth != null; // A simplified rule for now. In a real app, you'd check if auth.uid is renter or owner of the booking.
      allow write: if request.auth != null; // Allow any logged-in user to write initially.
    }
  }
}
