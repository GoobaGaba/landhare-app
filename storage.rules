
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the resource path.
    // This allows a user to write to their own folder, e.g., 'listings/{userId}/...'
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Match any file in the 'listings' folder.
    match /listings/{userId}/{allPaths=**} {
      
      // Anyone can read listing images. This is required for the public to see them.
      allow get;
      
      // Only an authenticated user can write files to their own subdirectory.
      // This prevents users from uploading files into other users' folders.
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Match any file in the 'leaseContracts' folder.
    match /leaseContracts/{bookingId}/{allPaths=**} {
        // In a real app with sensitive data, you would add logic here
        // to check if the requesting user is the renter or landowner for the bookingId.
        // For this app, allowing any authenticated user to read is sufficient,
        // as the URLs are unguessable and only exposed to the correct users in the app UI.
        allow read: if isAuthenticated();
        allow write: if isAuthenticated();
    }

  }
}
