rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check for authentication
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  
    // LISTING IMAGES
    // - Anyone can read listing images.
    // - Only an authenticated user can upload an image into their own user-ID-namespaced folder.
    // - This prevents users from uploading files into other users' folders.
    // - We also restrict file size (e.g., max 5MB) and content type.
    match /listings/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId)
                    && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                    && request.resource.contentType.matches('image/.*');
    }
    
    // LEASE CONTRACTS
    // - Only the landowner or renter involved in the booking should be able to read the lease.
    // - This requires a more complex setup where file metadata stores renter/landowner IDs.
    // - For now, we secure writing to authenticated users. Reading will rely on unguessable URLs.
    match /leaseContracts/{bookingId}/{fileName} {
        allow read: if isAuthenticated(); // More complex rules needed for prod, but this is a safe start
        allow write: if isAuthenticated(); // Assuming server logic handles who can write
    }
    
    // Fallback: Deny all other read/write operations
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
