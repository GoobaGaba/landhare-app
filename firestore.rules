
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Default Security: Deny all reads and writes by default ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Users Collection ---
    // Users can read their own profile.
    // Users can create their own profile upon signup.
    // Users can only update their own profile data.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // --- Listings Collection ---
    // Anyone can read listings (public data).
    // Authenticated users can create new listings.
    // Landowners can update or delete their own listings.
    match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.resource.data.landownerId == request.auth.uid;
    }

    // --- Reviews Collection ---
    // Anyone can read reviews for a listing.
    // Authenticated users can create reviews (future-proofing).
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    // --- Bookings Collection ---
    // Users can only read bookings where they are the renter or landowner.
    // Authenticated users can create bookings.
    // Users can only update bookings they are involved in.
    match /bookings/{bookingId} {
      allow read, update: if request.auth != null && (request.resource.data.renterId == request.auth.uid || request.resource.data.landownerId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.renterId == request.auth.uid;
    }
    
    // --- Transactions Collection ---
    // Users can only read their own transactions.
    match /transactions/{transactionId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null; // Server-side logic creates these securely.
    }
    
    // --- Admin-only collections ---
    // Only admins (validated via custom claims or a user document field) should access this data.
    // For simplicity here, we'll lock it down completely from the client.
    // All writes should be done via a trusted backend/server function.
    match /admin_state/{docId} {
      allow read, write: if false; // Assume reads/writes are from a trusted server environment
    }
     match /backtest_presets/{docId} {
      allow read, write: if false; // Assume reads/writes are from a trusted server environment
    }
  }
}
