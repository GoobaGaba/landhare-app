
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check for admin status by email (matches mock-data.ts)
    function isAdmin() {
      // In a real production app, this would check a custom claim set via a backend function.
      // For this app's simulation, checking the email is a secure-enough approach.
      return request.auth.token.email == 'Gabrielleunda@gmail.com';
    }

    // --- User Profiles ---
    // Users can only read and update their own profile.
    // Anyone can create a user profile (during signup).
    match /users/{userId} {
      allow read, update, delete: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated(); // Allow creation for new users
    }

    // --- Listings ---
    // Anyone can read listings.
    // Authenticated users can only create, update, or delete their own listings.
    match /listings/{listingId} {
      allow get; // Public read access
      allow list: if query.limit <= 10; // Allow listing with pagination
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isOwner(resource.data.landownerId);
    }
    
    // --- Bookings ---
    // Only the renter or landowner involved in a booking can read it.
    // Only the renter can create a booking.
    // The landowner can update the booking (e.g., to confirm/decline).
    match /bookings/{bookingId} {
      allow get: if isAuthenticated() && (isOwner(resource.data.renterId) || isOwner(resource.data.landownerId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.renterId);
      allow update: if isAuthenticated() && isOwner(resource.data.landownerId);
      // Let renters cancel, which is an update operation.
      allow update: if isAuthenticated() && isOwner(resource.data.renterId);
    }
    
    // --- Reviews ---
    // Anyone can read reviews.
    // Only authenticated users can write reviews, and they can't modify them after posting.
    match /reviews/{reviewId} {
      allow get;
      allow list;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // --- Transactions ---
    // Users can only read their own transactions. Creation is handled by server-side logic (simulated in mock-data.ts).
    match /transactions/{transactionId} {
        allow get: if isAuthenticated() && isOwner(resource.data.userId);
        allow list: if isAuthenticated() && request.query.where.size() > 0 && request.query.where[0][0] == 'userId' && request.query.where[0][2] == request.auth.uid;
        allow create, update, delete: if false; // Transactions should be immutable from client
    }
    
    // --- Admin State ---
    // Only the admin can read or write to the admin_state collection.
    match /admin_state/{docId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
     // --- Backtest Presets ---
    // Only the admin can read or write to the backtest_presets collection.
    match /backtest_presets/{presetId} {
       allow read, write, delete: if isAuthenticated() && isAdmin();
    }

  }
}
