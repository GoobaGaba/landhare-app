rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // UTILITY: Function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // UTILITY: Function to check if the user is an Admin
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- USERS COLLECTION ---
    // Users can read their own profile.
    // Users can update their own profile (name, bio, bookmarks, etc.).
    // Critical fields like email, isAdmin, walletBalance, subscriptionStatus are protected from direct user updates.
    // New user profiles are created via backend functions, not direct client writes.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if false; // Creation handled by backend Cloud Function/Server Action
      allow update: if request.auth.uid == userId
                    && !('email' in request.resource.data)
                    && !('isAdmin' in request.resource.data)
                    && !('walletBalance' in request.resource.data)
                    && !('subscriptionStatus' in request.resource.data);
      allow delete: if false; // Users should not delete their own profiles
    }

    // --- LISTINGS COLLECTION ---
    // Anyone can read listings.
    // Only authenticated users can create listings.
    // Only the landowner who created the listing can update or delete it.
    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.landownerId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.landownerId == request.auth.uid;
    }

    // --- BOOKINGS COLLECTION ---
    // Users can only read bookings where they are the renter or the landowner.
    // Only authenticated users can create booking requests.
    // Only the involved parties can update the booking (e.g., landowner confirms, renter cancels).
    match /bookings/{bookingId} {
      allow read, update: if isAuthenticated() 
                          && (request.auth.uid == resource.data.renterId || request.auth.uid == resource.data.landownerId);
      allow create: if isAuthenticated();
      allow delete: if false; // Bookings should be cancelled/archived, not deleted.
    }
    
    // --- REVIEWS COLLECTION ---
    // Anyone can read reviews.
    // Only authenticated users can write reviews.
    // Users can only edit or delete their own reviews.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // --- TRANSACTIONS COLLECTION ---
    // Users can only read their own transactions.
    // Transactions are created by the backend only.
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create, update, delete: if false; // Backend only
    }

    // --- ADMIN_STATE COLLECTION ---
    // This collection holds platform-wide data like metrics and checklists.
    // Only admins can read or write to this collection.
    match /admin_state/{docId} {
        allow read, write: if isAdmin();
    }
    
    // --- BACKTEST_PRESETS COLLECTION ---
    // This collection holds user-saved presets for the backtesting tool.
    // Only admins can read or write to this collection.
    match /backtest_presets/{presetId} {
      allow read, write, delete: if isAdmin();
    }
  }
}
