
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // UTILITY: Check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // UTILITY: Check if the user is the owner of the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Users Collection ---
    // Anyone can read a user's public profile (name, avatar)
    // Only the user themselves can create or update their own profile
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Users cannot delete their own profiles
    }

    // --- Listings Collection ---
    // Anyone can read listings
    // Only authenticated users can create listings
    // Only the owner of a listing can update or delete it
    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.landownerId == request.auth.uid;
    }
    
    // --- Reviews Collection ---
    // Anyone can read reviews
    // Only authenticated users can create reviews
    // Users cannot update or delete reviews to maintain integrity
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if false;
    }
    
    // --- Bookings Collection ---
    // Bookings are private.
    // Only the renter or the landowner involved in the booking can read it.
    // Only the renter can create a booking request.
    // Only the renter or landowner can update the booking (e.g., status changes).
    match /bookings/{bookingId} {
      allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.renterId || request.auth.uid == resource.data.landownerId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.renterId);
      allow delete: if false; // Bookings are archived, not deleted
    }

    // --- Transactions Collection ---
    // Transactions are private. Only the user can read their own transactions.
    // Transactions are created by the backend (server-side logic), not directly by clients.
    match /transactions/{transactionId} {
        allow read: if isAuthenticated() && isOwner(resource.data.userId);
        allow create, update, delete: if false;
    }

    // --- Admin-only Collections ---
    // Only authenticated users who are marked as admins can read/write here.
    function isAdmin() {
        return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    match /admin_state/{docId} {
        allow read, write: if isAdmin();
    }
    match /backtest_presets/{presetId} {
        allow read, write: if isAdmin();
    }
  }
}
