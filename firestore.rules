rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Default Deny ---
    // By default, no one can read or write anything.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    // Anyone can create their own user profile upon signup.
    // Users can only read/write their OWN profile data.
    // Public read access is NOT allowed for security (e.g., to prevent scraping emails).
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // --- Listings ---
    // Anyone (including unauthenticated users) can read listings.
    // Only authenticated users can create listings.
    // Users can only update or delete their OWN listings.
    match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.landownerId;
    }
    
    // --- Bookings ---
    // Only the renter or the landowner involved in a booking can read it.
    // Only authenticated users can create bookings.
    // The involved renter or landowner can update the booking (e.g., change status).
    match /bookings/{bookingId} {
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.renterId || request.auth.uid == resource.data.landownerId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.renterId;
    }
    
    // --- Reviews ---
    // Anyone can read reviews for a listing.
    // Only authenticated users can create reviews.
    // Users can only update/delete their own reviews.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // --- Transactions ---
    // Users can only read their own transaction history.
    // Transactions are created server-side (via security rules for bookings/subscriptions, or Cloud Functions in a full setup), so client-side creation is denied.
    match /transactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create, update, delete: if false;
    }

    // --- Admin-Only Collections ---
    // Collections like `admin_state` and `backtest_presets` should only be accessible by your admin backend or Cloud Functions.
    // For direct client access (as in this app), we lock it down to a specific list of admin UIDs.
    function isAdmin() {
      // In a real production app, you might use custom claims.
      // For this app, we check against a hardcoded list of admin emails stored in the user's profile.
      // This rule assumes an 'isAdmin' flag is set on the user's document.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /admin_state/{docId} {
      allow read, write: if isAdmin();
    }
    
     match /backtest_presets/{docId} {
      allow read, write: if isAdmin();
    }
  }
}
