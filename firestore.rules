
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default Deny: By default, no one can read or write to any document.
    match /{document=**} {
      allow read, write: if false;
    }

    // Listings can be read by anyone, but only created/updated/deleted by the landowner.
    match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.landownerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.landownerId == request.auth.uid;
    }

    // Users can only read/write their own user profile document.
    match /users/{userId} {
      allow read, create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Bookings can be created by authenticated users.
    // They can only be read or updated by the renter or the landowner involved in the booking.
    match /bookings/{bookingId} {
      allow create: if request.auth != null && request.resource.data.renterId == request.auth.uid;
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.renterId || request.auth.uid == resource.data.landownerId);
    }
    
    // Reviews can be created by any authenticated user.
    // They can be read by anyone.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Transactions can only be accessed by the user they belong to.
    match /transactions/{transactionId} {
        allow read, create: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Admin-specific state can only be read/written by authenticated users whose email is in the admin list.
    // IMPORTANT: This rule requires your frontend logic to correctly identify and pass admin status.
    // A more secure way would be to use custom claims, but this is a solid start for production.
    match /admin_state/{docId} {
       allow read, write: if request.auth != null && request.auth.token.email_verified && request.auth.token.email in ['Gabrielleunda@gmail.com'];
    }

    match /backtest_presets/{presetId} {
       allow read, write: if request.auth != null && request.auth.token.email_verified && request.auth.token.email in ['Gabrielleunda@gmail.com'];
    }
  }
}
